Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: FTH_ExportExcel unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #FTH_ExportExcel
    PROPERTIES
      Name                #FTH_ExportExcel
      RunOn               #Client
      Origin              #{E0DE4026-D404-403F-ADB6-5E357892D818}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//////////////////////////////////////////////////////////////////////////////////////////////////
        #//Class       : FTH_ExportExcel
        #//Description : Framework for Export Excel
        #//
        #//Date       Name           History　
        #//------------------------------------------------------------------------------------------------
        #//20180212   FTH Poradee New.
        #//------------------------------------------------------------------------------------------------
        #//////////////////////////////////////////////////////////////////////////////////////////////////
        #class FTH_ExportExcel
        #{
        #    int i;
        #    str                  fileName;
        #    int row;
        #    int rowstart, rowIndex;
        #    container colHeader;
        #    container colData;
        #    container colDataRow;
        #    container colStyle, colSubStyle, colNumFormat, colNumSubFormat;
        #    SysExcelApplication  xlsApplication;
        #    SysExcelWorkBooks    xlsWorkBookCollection;
        #    SysExcelWorkBook     xlsWorkBook;
        #    SysExcelWorkSheets   xlsWorkSheetCollection;
        #    SysExcelWorkSheet    xlsWorkSheet;
        #    SysExcelRange        xlsRange;
        #    SysExcelCells cellsHeader, cellsData, cells;
        #    SysExcelCell cellAccNum, cellName;
        #    SysExcelFont headerFont;
        #}
      ENDSOURCE
      SOURCE #CreateColumnHeader
        #//////////////////////////////////////////////////////////////////////////////////////////////////
        #//Method       : CreateColumnHeader
        #//Description : Create column header for Excel.
        #//
        #//Date       Name           History　
        #//------------------------------------------------------------------------------------------------
        #//20180212   FTH Poradee New.
        #//------------------------------------------------------------------------------------------------
        #//////////////////////////////////////////////////////////////////////////////////////////////////
        #public void CreateColumnHeader()
        #{
        #
        #    int colIndex = 1;
        #    str colName;
        #    ;
        #    if(rowstart == 0)
        #    {
        #        rowstart = 1;
        #    }
        #    cellsHeader = xlsWorkSheet.cells();
        #    cellsData = xlsWorkSheet.cells();
        #    cellsHeader.range('A:A').numberFormat('@');
        #    while(colIndex <= conLen(colHeader))
        #    {
        #        // Prints the content of a container.
        #        cellName = cellsHeader.item(rowstart, colIndex);
        #        cellName.value(conPeek(colHeader, colIndex));
        #        this.setFont(cellName);
        #        colIndex++;
        #
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #CreateData
        #//////////////////////////////////////////////////////////////////////////////////////////////////
        #//Method       : CreateData
        #//Description : Write data into Excel.
        #//
        #//Date       Name           History　
        #//------------------------------------------------------------------------------------------------
        #//20180212   FTH Poradee New.
        #//------------------------------------------------------------------------------------------------
        #//////////////////////////////////////////////////////////////////////////////////////////////////
        #public void CreateData()
        #{
        #    container subnum;
        #    int subIndex = 1;
        #    int colIndex = 1;
        #    str colName;
        #    int cnt = 1;
        #    str Type, SubType;
        #    int formatPos, formatNeg, formatZero;
        #    int endingRow, rowcontIndex;
        #    cellsData = xlsWorkSheet.cells();
        #
        #    //cellsData.range('A:A').numberFormat('@');
        #    rowcontIndex = 0;
        #    if(rowIndex == 0)
        #    {
        #        rowIndex = 1;
        #    }
        #    endingRow = conLen(colDataRow) + rowIndex;
        #    while(rowIndex <= endingRow - 1)
        #    {
        #        rowcontIndex ++;
        #        // Print the content of a container.
        #        colData = conPeek(colDataRow, rowcontIndex);
        #        colIndex = 1;
        #        while(colIndex <= conLen(colData))
        #        {
        #
        #            Row = rowIndex + 1;
        #            Type = conPeek(colStyle, colIndex);
        #            SubType = conPeek(colSubStyle, colIndex);
        #            subnum = conPeek(colNumFormat, colIndex);
        #            switch (Type)
        #            {
        #                case "Text" , "Date" :
        #                    this.setStyle(Type,SubType, colIndex);
        #                    break;
        #                default :
        #                    formatPos  = conPeek(subnum, 1);
        #                    formatNeg  = conPeek(subnum, 2);
        #                    formatZero = conPeek(subnum, 3);
        #                    if(formatPos != 0 ||
        #                        formatNeg != 0 ||
        #                        formatZero != 0 )
        #                    this.setStyleNumber(Type, formatPos, formatNeg, formatZero, colIndex);
        #                    break;
        #
        #            }
        #
        #            cellName = cellsData.item(Row, colIndex);
        #            cellName.value(conPeek(colData, colIndex));
        #            //this.setFont(cellName);
        #            colIndex++;
        #        }
        #
        #        rowIndex++;
        #    }
        #}
      ENDSOURCE
      SOURCE #Export
        #//<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #public void Export(boolean  visible)
        #{
        #    //Initialize Excel instance
        #    xlsApplication           = SysExcelApplication::construct();
        #    //Open Excel document
        #    //xlsApplication.visible(true);
        #    //Create Excel WorkBook and WorkSheet
        #    xlsWorkBookCollection    = xlsApplication.workbooks();
        #    xlsWorkBook              = xlsWorkBookCollection.add();
        #    xlsWorkSheetCollection   = xlsWorkBook.worksheets();
        #    xlsWorkSheet             = xlsWorkSheetCollection.itemFromNum(1);
        #    //Excel columns captions
        #
        #
        #    this.writeHeader();
        #    row++;
        #    this.CreateData();
        #    xlsWorkSheet.columns().autoFit();
        #   //Check whether the document already exists
        #   if(WinApi::fileExists(fileName))
        #      WinApi::deleteFile(fileName);
        #
        #
        #    // Suppress the pop-up window:
        #    // A file named foo already exists in this location. Do you want to replace it?
        #    xlsApplication.displayAlerts(false);
        #    // Save the Excel file
        #    xlsWorkbook.saveAs(fileName);
        #    xlsWorkbook.comObject().save();
        #    xlsWorkbook.saved(true);
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    xlsWorkbook.close(true);
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    // Make sure you close the Excel application
        #    // Especially if you run the job without showing Excel on the desktop
        #    xlsApplication.visible(visible);
        #    xlsApplication.quit();
        #
        #
        #}
      ENDSOURCE
      SOURCE #setFont
        #private void setFont(SysExcelCell _cell)
        #{
        #    headerFont = _cell.font();
        #
        #    headerFont.bold(false);
        #}
      ENDSOURCE
      SOURCE #setFormatNegative
        #private str setFormatNegative(int Type, str Zero)
        #{
        #    str Format;
        #    switch (Type)
        #    {
        #        case 1:
        #            Format = "-#,##0." + Zero ;
        #            break;
        #        case 2:
        #            Format = "(#,##0." + Zero + ")";
        #            break;
        #    }
        #    return Format;
        #}
      ENDSOURCE
      SOURCE #setFormatPositive
        #private str setFormatPositive(int Type)
        #{
        #    str Format;
        #    switch (Type)
        #    {
        #        case 1:
        #            Format = "#,##0." ;
        #            break;
        #
        #    }
        #    return Format;
        #}
      ENDSOURCE
      SOURCE #setFormatZero
        #private str setFormatZero(int Type, str Zero)
        #{
        #    str Format;
        #    switch (Type)
        #    {
        #        case 1:
        #            Format = "0." + Zero ;
        #            break;
        #        case 2:
        #            Format = "\"\"";
        #            break;
        #    }
        #    return Format;
        #}
      ENDSOURCE
      SOURCE #setnumberFormat
        #public void setnumberFormat(str Col, int digits,
        #            int TypePos, int TypeNeg, int TypeZero)
        #{
        #    int cnt = 0;
        #    str format;
        #    while (cnt < digits){
        #        format += "0";
        #        cnt ++;
        #    }
        #
        #    cellsData.range(Col + int642str(row) + ":" + Col
        #    + int642str(row)).numberFormat(this.setFormatPositive(TypePos) + format +
        #    "; " + this.setFormatNegative(TypeNeg, Format) +
        #    "; " + this.setFormatZero(TypeZero, Format));
        #}
      ENDSOURCE
      SOURCE #setStyle
        #private void setStyle(str Type,str SubType, int Pos)
        #{
        #    date dateTime;
        #    str colName;
        #    str Range;
        #    colName = num2char(Pos + 64);
        #    if(Type)
        #    {
        #        if(Type == "Date")
        #        {
        #            if(!SubType)
        #            {
        #                SubType = "dd/MM/yyyy";
        #            }
        #        }
        #        Range = colName + ":" + colName ;
        #        cellsData.range(colName + int642str(row) + ":" + colName + int642str(row)).numberFormat(SubType);
        #        //cellsData.range(Range).numberFormat('yyyyMMdd');
        #    }
        #}
      ENDSOURCE
      SOURCE #setStyleNumber
        #private void setStyleNumber(str Type, int fpos, int fneg, int fzer, int Pos)
        #{
        #    date dateTime;
        #    str colName;
        #    str Range;
        #    colName = num2char(Pos + 64);
        #    this.setnumberFormat(colName,str2int(Type),fpos, fneg, fzer);
        #}
      ENDSOURCE
      SOURCE #writeHeader
        #public void writeHeader()
        #{
        #    this.CreateColumnHeader();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: FTH_SendEmail unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #FTH_SendEmail
    PROPERTIES
      Name                #FTH_SendEmail
      Extends             #RunBaseBatch
      RunOn               #Server
      Origin              #{62563B2C-FF80-4B88-AB2B-C939A5D3F8D5}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class FTH_SendEmail extends RunBaseBatch
        #{
        #    LogisticsElectronicAddressLocator VendEmail;
        #    Voucher PaymentVoucher;
        #    Filename    fileName;
        #    RecId       transRecId;
        #    //FTC_SendEmaiType    emailType;
        #}
        #
      ENDSOURCE
      SOURCE #getBodyMsg
        #private str  getBodyMsg()
        #{
        #    str DocNum;
        #
        #    str  strMessage;
        #
        #    return strMessage;
        #}
      ENDSOURCE
      SOURCE #getEmailId
        #private Email getEmailId()
        #{
        #    FTH_EDetailPaymentParameter edetailTable;
        #
        #    select firstOnly edetailTable;
        #    return edetailTable.FTH_EmailTemplate;
        #}
      ENDSOURCE
      SOURCE #parmFilename
        #public FileName parmFilename(FileName _filename = filename)
        #{
        #    filename = _filename;
        #
        #    return filename;
        #}
      ENDSOURCE
      SOURCE #parmPaymentVoucher
        #public Voucher parmPaymentVoucher(Voucher _paymentVoucher = paymentVoucher)
        #{
        #    paymentVoucher = _paymentVoucher;
        #
        #    return paymentVoucher;
        #}
      ENDSOURCE
      SOURCE #parmTransRecId
        #public RecId parmTransRecId(RecId _transRecId = transRecId)
        #{
        #    transRecId = _transRecId;
        #
        #    return transRecId;
        #}
      ENDSOURCE
      SOURCE #parmVendEmail
        #public LogisticsElectronicAddressLocator parmVendEmail(LogisticsElectronicAddressLocator _vendEmail = vendEmail)
        #{
        #    vendEmail = _vendEmail;
        #
        #    return vendEmail;
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    this.sendEmail();
        #}
      ENDSOURCE
      SOURCE #sendEmail
        #//FTH_65KI_AP001_PS_EDOneVoucher_20180508
        #private void sendEmail()
        #{
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    str         attachFile;
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    VendTable   vendTable;
        #    str     strFileName;
        #    str     datestr;
        #    LedgerJournalTrans  ledgerJournalTrans;
        #    RecId _pointer;
        #    SysEmailParameters parameters = SysEmailParameters::find();
        #    str  strMessage, strMessage2;
        #    SMTPRelayServerName relayServer;
        #    SMTPPortNumber portNumber;
        #    SMTPUserName userName;
        #    SMTPPassword password;
        #    str  subject,body;
        #    InteropPermission interopPermission;
        #    SysMailer mailer;
        #    System.Exception e;
        #    SysEmailTable   _sysMailTable;
        #
        #    SysEmailAddress EmailSender;
        #    EmailProfileName NameSender;
        #    SysEmailMessageTable sysMsg;
        #    ;
        #
        #    if (parameters.SMTPRelayServerName)
        #    relayServer = parameters.SMTPRelayServerName;
        #    else
        #    relayServer = parameters.SMTPServerIPAddress;
        #    portNumber = parameters.SMTPPortNumber;
        #    userName = parameters.SMTPUserName;
        #    password = SysEmailParameters::password();
        #    subject = "";
        #    strMessage = this.getBodyMsg();
        #
        #    _sysMailTable = SysEmailTable::find(this.getEmailId());
        #
        #    EmailSender = _sysMailTable.SenderAddr;
        #    NameSender = _sysMailTable.SenderName;
        #
        #    sysMsg = SysEmailMessageTable::find(this.getEmailId(), "en-us", false);
        #
        #    select firstOnly ledgerJournalTrans
        #    where ledgerJournalTrans.RecId == transRecId;
        #    datestr = date2str(ledgerJournalTrans.TransDate, 123, 2, 4, 2, 4, 4);
        #    subject = strReplace(sysMsg.Subject, '%PaymentDate%', datestr);
        #    body = strReplace(sysMsg.Mail, "%PaymentDate%", datestr);
        #
        #    //body += "<br>" + _grpEmailTable.EmailRecipient;
        #    CodeAccessPermission::revertAssert();
        #
        #        try
        #        {
        #            interopPermission = new InteropPermission(InteropKind::ComInterop);
        #            interopPermission.assert();
        #            mailer = new SysMailer();
        #            mailer.SMTPRelayServer(relayServer,portNumber,userName,password, parameters.NTLM);
        #            //instantiate email
        #            //mailer.fromAddress('poradees@gmail.com', 'Ax Server');
        #            mailer.fromAddress(EmailSender, NameSender);
        #            //mailer.tos().appendAddress('poradee@th.fujitsu.com');
        #            mailer.tos().appendAddress(this.parmVendEmail());
        #            mailer.subject(subject);
        #            mailer.htmlBody(body);
        #            strFileName = this.parmFilename();
        #            //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #            mailer.attachments().add(strFileName);
        #            /* old
        #            strFileName = this.parmFilename();
        #            mailer.attachments().add(strFileName);
        #            attachFile = strReplace(strFileName, ".xlsx", "_.xlsx");
        #            System.IO.File::Copy(strFileName,attachFile,true);
        #            */
        #            //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #            mailer.sendMail();
        #            CodeAccessPermission::revertAssert();
        #        }
        #        catch (Exception::CLRError)
        #        {
        #            e = ClrInterop::getLastException();
        #
        #            while (e)
        #            {
        #                info(e.get_Message());
        #                e = e.get_InnerException();
        #            }
        #                CodeAccessPermission::revertAssert();
        #        }
        #
        #}
      ENDSOURCE
      SOURCE #main
        #public static void main(Args _args)
        #{
        #    FTH_SendEmail   send = new FTH_SendEmail();
        #    send.run();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: FTH_ExportExcelEDtail unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #FTH_ExportExcelEDtail
    PROPERTIES
      Name                #FTH_ExportExcelEDtail
      Extends             #FTH_ExportExcel
      RunOn               #Client
      Origin              #{C9315395-721F-4561-9E88-80FE56EE5185}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class FTH_ExportExcelEDtail Extends FTH_ExportExcel
        #{
        #    TransDate   PaymentDate;
        #    QueryRun    Qr;
        #    RecId       transRecId;
        #    LedgerJournalTrans LJT;
        #    LedgerJournalTable LJTable;
        #    VendTrans  vendTrans;
        #    VendSettlement  vendSettlement;
        #    VendInvoiceJour vendInvoiceJour;
        #    SpecTrans   specTrans;
        #    VendTransOpen   vendTransOpen;
        #    TaxWithholdTrans    taxWithholdTrans;
        #    VendBankAccount     vendBankAccount;
        #    Amount  SumInvoiceAmount, SumWithholdAmount, SumNetAmount;
        #    Voucher paymentVoucher;
        #    Name payeeName;
        #    int rnd, TotalRow;
        #    SysExcelStyles          styles;
        #    SysExcelStyle           style;
        #}
      ENDSOURCE
      SOURCE #CreateColumnHeader
        #public void CreateColumnHeader(boolean  setBold = false)
        #{
        #    super();
        #}
      ENDSOURCE
      SOURCE #CreateData
        #//FTH_65KI_AP001_PS_EDOneVoucher_20180508
        #public void CreateData()
        #{
        #    ComVariant                  borderType = new COMVariant();
        #    ComVariant                  lineType =   new COMVariant();
        #    COM                         borders, border;
        #    SysExcelFont            font;
        #    COM         CellCom;
        #    SysExcelRange           rangeBorder;
        #    InvoiceId   tmpInvoiceId;
        #    str sDate, eDate;
        #    str AccountNo, reasonRef, sProductGroup;
        #    ExchRate ExchangeRate;
        #    str Description;
        #    TaxGroup taxgrp;
        #    int cnt = 1;
        #
        #
        #    #define.xlEdgeBottom(8) // Line alignment
        #
        #    #define.xlContinuous(7) // FOR DARKNESS
        #    try
        #    {
        #
        #        while (Qr.next())
        #        {
        #            LJTable = Qr.getNo(1);
        #            LJT     = Qr.getNo(2);
        #            ///Get InvoiceList
        #            ///Create Data
        #            if(LJTable.Posted == NoYes::No) // If Payment Transaction is "Open"
        #            {
        #                this.getNonPostedPayment();
        #            }
        #            else  // If Payment Transaction is "Paid"
        #            {
        #               this.getPostedPayment();
        #            }
        #            ///Create Total
        #            colStyle = conNull();
        #            colSubStyle = conNull();
        #            colData = conNull();
        #            colData     = conIns(colData, 1, "");
        #            colData     = conIns(colData, 2, "Total");
        #            colData     = conIns(colData, 3, rnd);
        #            colData     = conIns(colData, 4, "");
        #            colData     = conIns(colData, 5, "Invoice(s)");
        #            colData     = conIns(colData, 6, "");
        #            colData     = conIns(colData, 7, SumInvoiceAmount);
        #            colData     = conIns(colData, 8, SumWithholdAmount);
        #            colData     = conIns(colData, 9, SumNetAmount);
        #
        #            rnd ++;
        #            colDataRow = conIns(colDataRow, rnd, colData);
        #        }
        #
        #
        #        //SetStyle Column
        #        cnt = 1;
        #        while(cnt <= 11)
        #        {
        #            switch (cnt)
        #            {
        #                case 2:
        #                    colStyle = conIns(colStyle, cnt, "Date"); //Type
        #                    colSubStyle = conIns(colSubStyle, cnt, "dd/MM/yyyy"); //SubType
        #                    colNumFormat = conIns(colNumFormat, cnt, conNull()); //SubType
        #                    break;
        #                //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #                case 3:
        #                    colStyle = conIns(colstyle, cnt, "Text");
        #                    colSubStyle = conIns(colSubStyle, cnt, "@"); //SubType
        #                    colNumFormat = conIns(colNumFormat, cnt, conNull()); //SubType
        #                    break;
        #                //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #                case 4:
        #                    colStyle = conIns(colStyle, cnt, "Date"); //Type
        #                    colSubStyle = conIns(colSubStyle, cnt, "dd/MM/yyyy"); //SubType
        #                    colNumFormat = conIns(colNumFormat, cnt, conNull()); //SubType
        #                    break;
        #                //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #                case 5:
        #                    colStyle = conIns(colstyle, cnt, "Text");
        #                    colSubStyle = conIns(colSubStyle, cnt, "@"); //SubType
        #                    colNumFormat = conIns(colNumFormat, cnt, conNull()); //SubType
        #                    break;
        #                //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #                case 7:
        #                    colStyle = conIns(colStyle, cnt, 2);
        #                    colSubStyle = conIns(colSubStyle, cnt, ""); //SubType
        #                    colNumSubFormat = conNull();
        #                    colNumSubFormat = conIns(colNumSubFormat,1, 1); //Set Positive format is "#,###.##"
        #                    colNumSubFormat = conIns(colNumSubFormat,2, 1); //Set Negative format is "-#,###.##"
        #                    colNumSubFormat = conIns(colNumSubFormat,3, 1); //Set Zero format is ""
        #
        #                    colNumFormat = conIns(colNumFormat, cnt, colNumSubFormat);
        #                    break;
        #                case 8:
        #                    colStyle = conIns(colStyle, cnt, 2);
        #                    colSubStyle = conIns(colSubStyle, cnt, ""); //SubType
        #                    colNumSubFormat = conNull();
        #                    colNumSubFormat = conIns(colNumSubFormat,1, 1); //Set Positive format is "#,###.##"
        #                    colNumSubFormat = conIns(colNumSubFormat,2, 1); //Set Negative format is "-#,###.##"
        #                    colNumSubFormat = conIns(colNumSubFormat,3, 1); //Set Zero format is ""
        #
        #                    colNumFormat = conIns(colNumFormat, cnt, colNumSubFormat);
        #                    break;
        #                case 9:
        #                    colStyle = conIns(colStyle, cnt, 2);
        #                    colSubStyle = conIns(colSubStyle, cnt, ""); //SubType
        #                    colNumSubFormat = conNull();
        #                    colNumSubFormat = conIns(colNumSubFormat,1, 1); //Set Positive format is "#,###.##"
        #                    colNumSubFormat = conIns(colNumSubFormat,2, 1); //Set Negative format is "-#,###.##"
        #                    colNumSubFormat = conIns(colNumSubFormat,3, 1); //Set Zero format is ""
        #
        #                    colNumFormat = conIns(colNumFormat, cnt, colNumSubFormat);
        #                    break;
        #
        #                default:
        #                    colStyle    = conIns(colStyle, cnt, "");
        #                    colSubStyle = conIns(colSubStyle, cnt, ""); //SubType
        #                    colNumFormat = conIns(colNumFormat, cnt, conNull()); //SubType
        #                    break;
        #            }
        #            cnt++;
        #        }
        #
        #
        #        rowIndex = 14;
        #        super();
        #
        #        rowstart = 6;
        #        colHeader = conNull();
        #        colHeader = conIns(colHeader, 1, "To");
        #        colHeader = conIns(colHeader, 2, VendTable::find(vendTrans.AccountNum).name());
        #        this.CreateColumnHeader();
        #        cellsHeader.item(6, 1).font().bold(true);
        #        this.mergCell("B6:E6");
        #
        #        rowstart = 7;
        #        colHeader = conNull();
        #        colHeader = conIns(colHeader, 1, "");
        #        colHeader = conIns(colHeader,2, vendTrans.AccountNum);
        #        this.CreateColumnHeader();
        #
        #    }
        #    catch
        #    {
        #    }
        #    TotalRow = 14 + rnd;
        #
        #
        #    //Table Header
        #    styles = xlsWorkBook.styles();
        #    style = styles.add('Header');
        #    cellsHeader.range("A14:K14").style('Header'); //Center
        #
        #    // Set font for this style to bold
        #    font = style.font();
        #    font.bold(true);
        #    cellsHeader.range("A14:K14").HorizontalAlignment(-4108);
        #
        #
        #    //Table Footer
        #    styles = xlsWorkBook.styles();
        #    style = styles.add('Footer');
        #    cellsHeader.range("B" + int2str(TotalRow) + ":K" + int2str(TotalRow)).style('Footer'); //Center
        #
        #    // Set font for this style to bold
        #    font = style.font();
        #    font.bold(true);
        #    cellsHeader.range("B" + int2str(TotalRow) + ":F" + int2str(TotalRow)).HorizontalAlignment(-4108);
        #
        #    //Set AlignMent
        #    cellsHeader.range("B15:B" + int2str(TotalRow)).HorizontalAlignment(-4108);
        #    cellsHeader.range("D15:D" + int2str(TotalRow)).HorizontalAlignment(-4108);
        #    cellsHeader.range("F15:F" + int2str(TotalRow)).HorizontalAlignment(-4108);
        #    //Set Border
        #    //Vendor
        #    rangeBorder   = cellsHeader.range("B6:D6");
        #    cellCOM = rangeBorder.comObject();
        #    borders = cellCOM.borders();
        #    border  =   borders.item(9);
        #    border.lineStyle(2);
        #    //border.weight(1);
        #    //Voucher
        #    rangeBorder   = cellsHeader.range("B7:D7");
        #    cellCOM = rangeBorder.comObject();
        #    borders = cellCOM.borders();
        #    border  =   borders.item(9);
        #    border.lineStyle(2);
        #    //border.weight(1);
        #    //Table
        #
        #    rangeBorder   = cellsHeader.range("B14:K" + int2str(TotalRow));
        #    cellCOM = rangeBorder.comObject();
        #    cellCOM = cellCOM.borders();
        #    cellCOM.color(0);
        #    rangeBorder   = cellsHeader.range("B" + int2str(TotalRow) + ":K" + int2str(TotalRow));
        #    cellCOM = rangeBorder.comObject();
        #    borders = cellCOM.borders();
        #    border  =   borders.item(9);
        #    border.lineStyle(9);
        #    //Set AlignMent
        #
        #
        #
        #    //Set Total Amount Format
        #    rangeBorder   = cellsHeader.range("G" + int2str(TotalRow) + ":I" + int2str(TotalRow));
        #    rangeBorder.numberFormat("#,##0.00; -#,##0.00; 0.00");
        #
        #    //Write Page Footer
        #    rowstart = TotalRow + 2;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "This message is intended for notification of payment.");
        #    this.CreateColumnHeader();
        #    this.mergCell("B" + int2str(rowstart) + ":E" + int2str(rowstart));
        #
        #    rowstart = TotalRow + 3;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "Should there be any inquiry, please kindly contact us directly.");
        #    this.CreateColumnHeader();
        #    this.mergCell("B" + int2str(rowstart) + ":E" + int2str(rowstart));
        #
        #    rowstart = TotalRow + 4;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "If you receive this e-mail by mistake, please delete this e-mail from your system and notify the sender immediately.");
        #    this.CreateColumnHeader();
        #    this.mergCell("B" + int2str(rowstart) + ":J" + int2str(rowstart));
        #}
      ENDSOURCE
      SOURCE #Export
        #public void Export(boolean  visible)
        #{
        #    Voucher     payVoucher;
        #    FTH_EDetailPaymentParameter parameter;
        #    //ST 20170425 Porade FTC.
        #    //Change File Path
        #    #WinAPI
        #    //ED 20170425 Porade FTC.
        #    //Filename
        #    TimeZone myTimeZone;
        #    System.DateTime dt;
        #    utcDateTime utcdt;
        #    str datestr;
        #    LedgerJournalTrans  ledgerJournalTrans1;
        #    payVoucher = this.parmPaymentVoucher();
        #    select firstOnly ledgerJournalTrans1
        #    where ledgerjournaltrans1.Voucher == payVoucher;
        #
        #    /*myTimeZone = Timezone::GMTPLUS0700_BANGKOK_HANOI_JAKARTA;
        #    utcdt = DateTimeUtil::getSystemDateTime();
        #    utcdt = DateTimeUtil::applyTimeZoneOffset(utcdt, myTimeZone);*/
        #    dt = ledgerJournalTrans1.TransDate;
        #
        #    datestr = dt.ToString('yyyyMMdd');
        #    select firstOnly parameter;
        #    fileName = parameter.FTH_FilePath + "\\" + datestr
        #                + "_" + payVoucher
        #                    + "_" + this.parmPayeeName() + ".xlsx";
        #    this.parmFileName(fileName);
        #    super(visible);
        #}
      ENDSOURCE
      SOURCE #findDescription
        #private str findDescription(VendInvoiceJour _vendInvoiceJour)
        #{
        #    VendInvoiceTrans            vendInvoiceTrans;
        #    GeneralJournalEntry         generalJournalEntry;
        #    GeneralJournalAccountEntry  generalJournalAccountEntry;
        #
        #    if (_vendInvoiceJour.PurchId)
        #    {
        #        select firstOnly vendInvoiceTrans
        #        order by vendInvoiceTrans.LineNum
        #        where  vendInvoiceTrans.PurchID ==  _vendInvoiceJour.PurchId
        #        &&     vendInvoiceTrans.InvoiceId   ==  _vendInvoiceJour.InvoiceId
        #        &&     vendInvoiceTrans.InvoiceDate ==  _vendInvoiceJour.InvoiceDate
        #        &&     vendInvoiceTrans.numberSequenceGroup ==  _vendInvoiceJour.numberSequenceGroup
        #        &&     vendInvoiceTrans.InternalInvoiceId   ==  _vendInvoiceJour.InternalInvoiceId;
        #
        #        return strReplace(vendInvoiceTrans.Name, "\n", " ");
        #    }
        #    else
        #    {
        #        select firstOnly generalJournalEntry
        #            join  generalJournalAccountEntry
        #            order by generalJournalAccountEntry.AccountingCurrencyAmount
        #            where  generalJournalAccountEntry.GeneralJournalEntry   ==  generalJournalEntry.RecId
        #            &&     generalJournalEntry.SubledgerVoucher ==  _vendInvoiceJour.LedgerVoucher
        #            &&     generalJournalEntry.AccountingDate   ==  _vendInvoiceJour.InvoiceDate;
        #
        #        return   strReplace(generalJournalAccountEntry.Text, "\n" , " ");
        #    }
        #}
      ENDSOURCE
      SOURCE #getNonPostedPayment
        #private void getNonPostedPayment()
        #{
        #    LedgerJournalTrans  locLedgerJournalTrans;
        #
        #    while select locLedgerJournalTrans
        #        order by locLedgerJournalTrans.Voucher
        #        join specTrans
        #        where specTrans.SpecCompany  ==  locLedgerJournalTrans.dataAreaId
        #            && specTrans.SpecRecId    ==  locLedgerJournalTrans.RecId
        #            && specTrans.SpecTableId  ==  locLedgerJournalTrans.TableId
        #            //&& locLedgerJournalTrans.Voucher ==  ledgerJournalTrans.Voucher
        #            && locLedgerJournalTrans.RecId   ==  LJT.RecId
        #    {
        #        select firstOnly vendTransOpen
        #        join vendTrans
        #        order by vendTrans.Voucher
        #        where vendTrans.AccountNum  ==  vendTransOpen.AccountNum
        #            && vendTrans.RecId       ==  vendTransOpen.RefRecId
        #            && vendTransOpen.dataAreaId  ==  specTrans.RefCompany
        #            && vendTransOpen.TableId     ==  specTrans.RefTableId
        #            && vendTransOpen.RecId       ==  specTrans.RefRecId
        #            ;
        #        rnd++;
        #        colStyle = conNull();
        #        colSubStyle = conNull();
        #        colData = conNull();
        #
        #        colDataRow = conIns(colDataRow, rnd, this.Mapping());
        #    }
        #}
      ENDSOURCE
      SOURCE #getPostedPayment
        #// FTH_65KI_AP001_PS_EDOneVoucher_20180508
        #private void getPostedPayment()
        #{
        #    LedgerJournalTrans  locLedgerJournalTrans;
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    /*old
        #    //ST 20180405 Poradee S. FTC
        #    //while select locLedgerJournalTrans
        #    //order by locLedgerJournalTrans.Voucher
        #    //join vendSettlement
        #    //where vendSettlement.OffsetTransVoucher  ==  locLedgerJournalTrans.Voucher
        #        //&& locLedgerJournalTrans.RecId   ==  LJT.RecId
        #    //{
        #        //select firstOnly vendTrans
        #        //order by vendTrans.Voucher
        #        //where vendTrans.RecId  ==  vendSettlement.TransRecId
        #            //;
        #        //rnd++;
        #        //colStyle = conNull();
        #        //colSubStyle = conNull();
        #        //colData = conNull();
        #    //
        #        //colDataRow = conIns(colDataRow, rnd, this.Mapping());
        #    //}
        #     while select locLedgerJournalTrans
        #        order by locLedgerJournalTrans.Voucher
        #        join vendTrans
        #        where locLedgerJournalTrans.VENDTRANSID  ==  vendTrans.RecId
        #            && locLedgerJournalTrans.RecId   ==  LJT.RecId
        #        join vendSettlement
        #        where vendSettlement.TRANSRECID == vendTrans.RecId
        #        {
        #            //select firstOnly vendTrans
        #            //order by vendTrans.Voucher
        #            //where vendTrans.RecId  ==  vendSettlement.TransRecId
        #                //;
        #            rnd++;
        #            colStyle = conNull();
        #            colSubStyle = conNull();
        #            colData = conNull();
        #
        #            colDataRow = conIns(colDataRow, rnd, this.Mapping());
        #        }
        #    //ED 20180405 Poradee S. FTC
        #    */
        #    vendTrans           locVendTrans;
        #    ;
        #    while select locLedgerJournalTrans
        #    order by locLedgerJournalTrans.Voucher
        #    join locVendTrans
        #    where locLedgerJournalTrans.VENDTRANSID  ==  locVendTrans.RecId
        #          && locLedgerJournalTrans.RecId   ==  LJT.RecId
        #    join vendSettlement
        #    where vendSettlement.TRANSRECID == locVendTrans.RecId
        #    {
        #        /* temp version
        #        select firstOnly vendTrans
        #        order by vendTrans.Voucher
        #        where vendTrans.RecId  ==  vendSettlement.TransRecId
        #        ;
        #        */
        #        select firstOnly vendTrans
        #        where vendTrans.RecId == locVendTrans.RecId;
        #        rnd++;
        #        colStyle = conNull();
        #        colSubStyle = conNull();
        #        colData = conNull();
        #
        #        colDataRow = conIns(colDataRow, rnd, this.Mapping());
        #    }
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #}
      ENDSOURCE
      SOURCE #getRow
        #private int getRow(int colRow)
        #{
        #    colRow ++;
        #    return colRow;
        #}
      ENDSOURCE
      SOURCE #Mapping
        #// FTH_65KI_AP001_PS_EDOneVoucher_20180508
        #private container Mapping()
        #{
        #    Name    invoiceDesc;
        #    Amount  InvoiceAmount, WHTAmount, NetAmount;
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    VendTrans  vendTransInvoice;
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    colData     = conIns(colData, 1, "");
        #
        #    colData     = conIns(colData, 2, LJT.TransDate);
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    /* old
        #    colData     = conIns(colData, 4, vendTrans.TransDate);
        #    if (vendTrans.Invoice)
        #    */
        #    if (specTrans) //If PaymentVoucher is Non Posted
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    {
        #        //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #        if (vendTrans.Invoice)
        #        {
        #        /* old
        #        colData     = conIns(colData, 4, vendTrans.TransDate);
        #        */
        #        //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #        vendInvoiceJour  =  VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum);
        #        colData     = conIns(colData, 3, vendTrans.Invoice);
        #        invoiceDesc = this.findDescription(vendInvoiceJour);
        #        //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #        colData     = conIns(colData, 4, vendTrans.TransDate);
        #        //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #        colData     = conIns(colData, 5, invoiceDesc);
        #        //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #        }
        #        else
        #        {
        #            colData     = conIns(colData, 3, vendTrans.DocumentNum);
        #            colData     = conIns(colData, 4, vendTrans.TransDate);
        #            colData     = conIns(colData, 5, vendTrans.Txt);
        #        }
        #        //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #
        #    } else { //If PaymentVoucher is posted
        #        //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #        /* old
        #        colData     = conIns(colData, 3, vendTrans.DocumentNum);
        #        colData     = conIns(colData, 5, vendTrans.Txt);
        #
        #
        #        */
        #        select firstOnly vendTransInvoice
        #        where vendTransInvoice.Voucher == vendSettlement.OffsetTransVoucher;
        #        if(vendTransInvoice.Invoice) // If AP Invoice case
        #        {
        #            vendTrans = vendTransInvoice;
        #            vendInvoiceJour  =  VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum);
        #            colData     = conIns(colData, 3, vendTrans.Invoice);
        #            colData     = conIns(colData, 4, vendTrans.TransDate);
        #            invoiceDesc = this.findDescription(vendInvoiceJour);
        #            colData     = conIns(colData, 5, invoiceDesc);
        #        }
        #        else //If Advance Payment Case
        #        {
        #            colData     = conIns(colData, 3, vendTransInvoice.DocumentNum);
        #            colData     = conIns(colData, 4, vendTransInvoice.TransDate);
        #            colData     = conIns(colData, 5, vendTransInvoice.Txt);
        #        }
        #        //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    }
        #    colData     = conIns(colData, 6, LJT.CurrencyCode);
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    if(specTrans)
        #    {
        #        InvoiceAmount = specTrans.Balance01 * -1;
        #    }
        #    else
        #    {
        #        /* old
        #        InvoiceAmount = vendSettlement.SettleAmountCUR * -1;
        #        */
        #        InvoiceAmount = vendSettlement.SettleAmountCUR;
        #    }
        #    /* old
        #    SumInvoiceAmount += (InvoiceAmount);
        #
        #    select sum(TaxWithholdAmount) from taxWithholdTrans
        #        where taxWithholdTrans.VendTransInvoiceId   ==  vendTrans.RecId;
        #
        #
        #    */
        #    if(specTrans)
        #    {
        #        select sum(TaxWithholdAmount) from taxWithholdTrans
        #        where taxWithholdTrans.VendTransInvoiceId   ==  vendTrans.RecId;
        #    }
        #    else
        #    {
        #        select sum(TaxWithholdAmount),  sum(InvoiceAmount) from taxWithholdTrans
        #        where taxWithholdTrans.VendTransInvoiceId   ==  vendSettlement.OffsetRecid;
        #        if(taxWithholdTrans.TaxWithholdAmount)
        #        {
        #            InvoiceAmount = taxWithholdTrans.InvoiceAmount;
        #        }
        #    }
        #    SumInvoiceAmount += (InvoiceAmount);
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    colData     = conIns(colData, 7, InvoiceAmount);
        #    colData     = conIns(colData, 8, taxWithholdTrans.TaxWithholdAmount);
        #    SumWithholdAmount += taxWithholdTrans.TaxWithholdAmount;
        #    SumNetAmount += (InvoiceAmount - taxWithholdTrans.TaxWithholdAmount);
        #    colData     = conIns(colData, 9, InvoiceAmount - taxWithholdTrans.TaxWithholdAmount);
        #    select firstOnly vendBankAccount
        #    where vendBankAccount.VendAccount == vendTrans.AccountNum;
        #    colData     = conIns(colData, 10, vendBankAccount.Name);// LJT.HRAPgetBankAccount());
        #    colData     = conIns(colData, 11, vendBankAccount.AccountNum);
        #
        #    return colData;
        #
        #}
      ENDSOURCE
      SOURCE #mergCell
        #private void mergCell(str strRange)
        #{
        #    SysExcelRange           range;
        #
        #    range   = cellsHeader.range(strRange);
        #
        #    range.comObject().MergeCells(1);
        #
        #}
      ENDSOURCE
      SOURCE #parmFileName
        #public FileName parmFileName(FileName _fileName = fileName)
        #{
        #    fileName = _fileName;
        #
        #    return fileName;
        #}
      ENDSOURCE
      SOURCE #parmPayeeName
        #public Name parmPayeeName(Name _payeeName = payeeName)
        #{
        #    payeeName = _payeeName;
        #
        #    return payeeName;
        #}
      ENDSOURCE
      SOURCE #parmPaymentDate
        #public Transdate parmPaymentDate(Transdate _paymentDate = paymentDate)
        #{
        #    paymentDate = _paymentDate;
        #
        #    return paymentDate;
        #}
      ENDSOURCE
      SOURCE #parmPaymentVoucher
        #public Voucher parmPaymentVoucher(Voucher _paymentVoucher = paymentVoucher)
        #{
        #    paymentVoucher = _paymentVoucher;
        #
        #    return paymentVoucher;
        #}
      ENDSOURCE
      SOURCE #parmQr
        #public QueryRun parmQr(QueryRun _Qr = Qr)
        #{
        #    Qr = _Qr;
        #
        #    return Qr;
        #}
      ENDSOURCE
      SOURCE #parmTransRecId
        #public RecId parmTransRecId(RecId _transRecId = transRecId)
        #{
        #    transRecId = _transRecId;
        #
        #    return transRecId;
        #}
      ENDSOURCE
      SOURCE #setBorder
        #private void setBorder()
        #{
        #    SysExcelCells            cellsBorder;
        #    SysExcelRange           range;
        #    COM                         cellCOM;
        #    COM                         borders, border;
        #    ComVariant                  borderType = new COMVariant();
        #    ComVariant                  lineType =   new COMVariant();
        #
        #    cellsBorder = xlsWorkSheet.cells();
        #    range   = cellsBorder.range("A14:K24");
        #    cellCOM = range.comObject();
        #    cellCOM = cellCOM.borders();
        #    cellCOM.color(0);
        #    /*Border = Borders.Item(2);
        #    Border.lineStyle(7);
        #    Border.Weight(1);*/
        #
        #
        #
        #}
      ENDSOURCE
      SOURCE #writeHeader
        #public void writeHeader()
        #{
        #
        #    #define.STYLE_BOLD('AX_Bold')
        #
        #    int colIndex = 1;
        #    str colName;
        #    Str Period;
        #     COM                         borders, border;
        #
        #
        #    cellsHeader = xlsWorkSheet.cells();
        #    cellsData = xlsWorkSheet.cells();
        #
        #    cellsHeader.range('A:A').numberFormat('@');
        #
        #
        #
        #    rowstart = 1;
        #    colHeader = conIns(colHeader, 1, CompanyInfo::find().Name);
        #    this.CreateColumnHeader();
        #
        #    cellsHeader.item(1, 1).font().bold(true);
        #    this.mergCell("A1:D1");
        #
        #
        #    rowstart = 2;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, CompanyInfo::find().postalAddress().Address);
        #    this.CreateColumnHeader();
        #    this.mergCell("A2:E2");
        #
        #    rowstart = 3;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "Tel: +66(0)2-508-5600 Fax: +66(0)2-508-5650-2");
        #    this.CreateColumnHeader();
        #
        #    this.mergCell("A3:E3");
        #
        #
        #    rowstart = 5;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "");
        #    colHeader = conIns(colHeader, 3, "");
        #    colHeader = conIns(colHeader, 4, "");
        #    colHeader = conIns(colHeader, 5, "PAYMENT ADVICE");
        #    this.CreateColumnHeader();
        #    cellsHeader.item(5, 5).font().bold(true);
        #    cellsHeader.range("E5:E5").HorizontalAlignment(-4108);
        #    this.mergCell("E5:G5");
        #
        #    rowstart = 7;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    this.CreateColumnHeader();
        #
        #
        #    rowstart = 9;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "Please be advised that have been instructed by Honda R&D Asia Co.,Ltd.");
        #
        #    this.CreateColumnHeader();
        #    this.mergCell("B9:F9");
        #
        #
        #    rowstart = 10;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "to make a payment as per the details given below.");
        #    this.CreateColumnHeader();
        #
        #    this.mergCell("B10:E10");
        #
        #
        #    rowstart = 12;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "Payment Details:");
        #
        #    this.CreateColumnHeader();
        #
        #    cellsHeader.item(12, 2).font().bold(true);
        #
        #    rowstart = 14;
        #    colHeader = conNull();
        #    colHeader = conIns(colHeader, 1, "");
        #    colHeader = conIns(colHeader, 2, "Payment Date");
        #
        #
        #    colHeader = conIns(colHeader, 3, "Invoice No.");
        #    colHeader = conIns(colHeader, 4, "Invoice Date");
        #    colHeader = conIns(colHeader, 5, "Description");
        #    colHeader = conIns(colHeader, 6, "CUR");
        #    colHeader = conIns(colHeader, 7, "Invoice Amount");
        #    colHeader = conIns(colHeader, 8, "Withholding Tax");
        #    colHeader = conIns(colHeader, 9, "Net Amount");
        #    colHeader = conIns(colHeader, 10, "Bank Name");
        #    colHeader = conIns(colHeader, 11, "Bank Account");
        #    this.CreateColumnHeader();
        #
        #
        #
        #
        #
        #
        #
        #
        #
        #
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: FTH_E_DetailPayment unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #FTH_E_DetailPayment
    PROPERTIES
      Name                #FTH_E_DetailPayment
      Origin              #{D40C2636-D3CC-4850-A845-49B59FF583DB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class FTH_E_DetailPayment
        #{
        #    Voucher paymentVoucher;
        #    LogisticsElectronicAddressLocator   email;
        #    AccountNum  vendAccount;
        #    Filename    filename;
        #    RecId       TransRecId;
        #    TransDate   PaymentDate;
        #}
      ENDSOURCE
      SOURCE #parmEmail
        #public LogisticsElectronicAddressLocator parmEmail(LogisticsElectronicAddressLocator _email = email)
        #{
        #    email = _email;
        #
        #    return email;
        #}
      ENDSOURCE
      SOURCE #parmFilename
        #public Filename parmFilename(Filename _filename = filename)
        #{
        #    filename = _filename;
        #
        #    return filename;
        #}
      ENDSOURCE
      SOURCE #parmPaymentDate
        #public TransDate parmPaymentDate(TransDate _paymentDate = paymentDate)
        #{
        #    paymentDate = _paymentDate;
        #
        #    return paymentDate;
        #}
      ENDSOURCE
      SOURCE #parmPaymentVoucher
        #public Voucher parmPaymentVoucher(Voucher _paymentVoucher = paymentVoucher)
        #{
        #    paymentVoucher = _paymentVoucher;
        #
        #    return paymentVoucher;
        #}
      ENDSOURCE
      SOURCE #parmTransRecId
        #public RecId parmTransRecId(RecId _transRecId = transRecId)
        #{
        #    transRecId = _transRecId;
        #
        #    return transRecId;
        #}
      ENDSOURCE
      SOURCE #process
        #// FTH_65KI_AP001_PS_EDOneVoucher_20180508
        #private void process(VendTable  vendTable)
        #{
        #    FTH_ExportExcelEDtail   exportDetail = new FTH_ExportExcelEDtail();
        #    Query   query = new Query(queryStr(FTH_EdetailPayment));
        #    QueryRun    Qr;
        #    QueryBuildRange qbr;
        #    ;
        #
        #
        #    //<FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    /* Old Code
        #    qbr = query.dataSourceTable(tableNum(LedgerJournalTrans)).findRange(fieldNum(LedgerJournalTrans, Voucher));
        #    */
        #    qbr = query.dataSourceTable(tableNum(LedgerJournalTrans)).findRange(fieldNum(LedgerJournalTrans, RecId));
        #    //</FTH_65KI_AP001_PS_EDOneVoucher_20180508>
        #    if(!qbr)
        #    {
        #        qbr = query.dataSourceTable( tableNum (LedgerJournalTrans))
        #            .addRange( fieldNum (LedgerJournalTrans, RecId));
        #    }
        #    qbr.value(SysQuery::value(TransRecId));
        #
        #    qr = new QueryRun(query);
        #    exportDetail.parmPayeeName(vendTable.HRAP_Payeename);
        #    exportDetail.parmTransRecId(TransRecId);
        #    exportDetail.parmPaymentVoucher(paymentVoucher);
        #    exportDetail.parmQr(qr);
        #
        #    exportDetail.Export(false);
        #    this.parmFilename(exportDetail.parmFileName());
        #}
      ENDSOURCE
      SOURCE #run
        #public void run(LedgerJournalTrans ledgerJournalTransSel)
        #{
        #    LedgerJournalTrans  ledgerJournalTranslocal;
        #    VendTable       vendTable;
        #    FTH_SendEmail sendEmail = new FTH_SendEmail();
        #    vendTable = VendTable::find(ledgerJournalTransSel.findVendTable().AccountNum);
        #    if(vendTable.FTH_SendEmail)
        #    {
        #            email = vendTable.email();
        #            this.process(vendTable);
        #            sendEmail.parmTransRecId(TransRecId);
        #            sendEmail.parmPaymentVoucher(paymentVoucher);
        #            sendEmail.parmVendEmail(email);
        #            sendEmail.parmFileName(fileName);
        #            sendemail.run();
        #            ttsbegin;
        #            select forupdate ledgerjournaltranslocal
        #            where ledgerjournaltranslocal.recid == ledgerjournaltranssel.recid;
        #            ledgerjournaltranslocal.fth_issend = noyes::yes;
        #            ledgerjournaltranslocal.fth_senddate = today();
        #            ledgerjournaltranslocal.update();
        #            ttscommit;
        #            info(strFmt("%1 was sent.", ledgerJournalTransSel.Voucher));
        #    }
        #}
      ENDSOURCE
      SOURCE #validateVendor
        #public boolean validateVendor(LedgerJournalTrans ledgerJournalTrans)
        #{
        #
        #    VendTable   vendTable;
        #    boolean     ret = true;
        #
        #
        #
        #    vendAccount = ledgerJournalTrans.findVendTable().AccountNum;
        #    vendTable   =   vendTable::find(vendAccount);
        #    this.parmEmail(vendTable.email());
        #    if(!email && vendTable.FTH_SendEmail)
        #    {
        #        error(strFmt("Please fill-in email on vendor: %1", vendAccount));
        #        ret = false;
        #    }
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: JOB

; Microsoft Dynamics AX Job: FTH_65KI_AP001_PS_EDOneVoucher_20180508 unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #FTH_65KI_AP001_PS_EDOneVoucher_20180508
    #static void FTH_65KI_AP001_PS_EDOneVoucher_20180508(Args _args)
    #{
    #    //Class:FTH_E_DetailPayment -> Method:Process()[edit]
    #    //Class:FTH_ExportExcelEDtail -> Method:getPostedPayment()[edit]
    #    //Class:FTH_ExportExcelEDtail -> Method:Mapping()[edit]
    #    //Class:FTH_E_DetailPayment -> Method:SendEmail()[edit]
    #    //Class:FTH_ExportExcel -> Method:Export()[edit]
    #    //Class:FTH_ExportExcel -> Method:CreateData()[edit]
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{A84B001D-68AE-462B-8147-7C4F8C93AF24}
  ENDPROPERTIES
  

***Element: PRN

; Microsoft Dynamics AX Project : FTH_65KI_AP001_PS_EDOneVoucher_20180508 unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #FTH_65KI_AP001_PS_EDOneVoucher_20180508
  SHARED
  PROPERTIES
    Name                #FTH_65KI_AP001_PS_EDOneVoucher_20180508
    Origin              #{11F5F7E1-3712-4936-BA87-C46FB5253780}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1025129
        NODETYPE 329
        NAME #FTH_ExportExcel
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1025131
        NODETYPE 329
        NAME #FTH_SendEmail
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1025130
        NODETYPE 329
        NAME #FTH_ExportExcelEDtail
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1025128
        NODETYPE 329
        NAME #FTH_E_DetailPayment
      ENDNODE
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #Jobs
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #FTH_65KI_AP001_PS_EDOneVoucher_20180508
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
